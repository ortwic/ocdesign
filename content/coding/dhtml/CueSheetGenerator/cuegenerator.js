//
// PROJECT     : JavaScript + RegEx
//
// AUTHOR      : Ortwin Cars***
//
// DESCRIPTION : Generates inaccurate CueSheets by tracklists
//
// DATE        : 2013-01-10
//
// REVISION    : 0.2
//

var fields = {
    TrackNo: "%tracknumber%",
    Title: "%title%",
    Performer: "%performer%",
    Remark: "%remark%",
    Duration: "%length%"
}

var reTrkNo = "(\\d*)";
var reTitle = "([\\w \\.,'\"-\\/#!$%\\^&\\*;:{}=\\-_`~()]*)";
var reDurtn = "(\\d{2,3}:\\d{2})";
var LINK = "http://ortwin.bplaced.net/content/projekte/CueSheetGenerator/cuegenerator.html";

var input, output, filename, duration, expr;

addEvent(this, "load", function() {
    expr = document.getElementById("txtExpr");
    input = document.getElementById("txtIn");
    output = document.getElementById("txtOut");
    filename = document.getElementById("txtFile");
    duration = document.getElementById("txtDuration");
    var startBtn = document.getElementById("cmdStart");
    var expBtn = document.getElementById("cmdExport");
        
    var clear = function() {
        if (this.className == "untouched") {
            // this.value = "";
            this.className = "";
        }
    };
    
    var setCaption = function(force) {
        var reset = function(obj, str) {
            // obj.placeholder = "";
            if(obj.value=="" || (force && force > 0)) {
                obj.className = "untouched";
                // obj.value = str;
            }
        };
        reset(expr, "Pattern");
        reset(input, "Tracklist");
        reset(output, "Cuesheet");
        reset(filename, "Filename");
        reset(duration, "Length [mm:ss]"); 
    };
    
    setCaption(true);
    
    addEvent(expr, "focus", clear);
    addEvent(input, "focus", clear);
    addEvent(output, "focus", clear);
    addEvent(filename, "focus", clear);
    addEvent(duration, "focus", clear);
    addEvent(expr, "blur", setCaption);
    addEvent(input, "blur", setCaption);
    addEvent(output, "blur", setCaption);
    addEvent(filename, "blur", setCaption);
    addEvent(duration, "blur", setCaption);
    addEvent(startBtn, "click", function() {
        if (input.className != "untouched") {
            output.className = "";
            output.value = getCueSheet(expr.value, input.value, filename.value, duration.value);
        }
    });
    addEvent(expBtn, "click", function() {
        // TODO open new window with content
        if (input.className != "untouched") {
            exp = window.open(filename.value + ".txt", "_blank");
            exp.document.write(getCueSheet(expr.value, input.value, filename.value, duration.value).replace(/\n/g,"<br>").replace(/ /g,"&nbsp;"));
        }
    });
    
    function getCueSheet(xp, pl, t, l) {
        var divStr = " - ";
        var divPos = t.search(divStr);
        var performer = "Various Artists", title = t;
        var aryFields = new Array(); // putting here unsorted fields from expression in
        var objFields = new Object(); // putting here sorted fields from expression in
        
        if(divPos>=0) {
            performer = t.substr(0, divPos);
            title = t.substr(divPos + divStr.length, t.search(/\w+$/));
        } 
        
        var string = 'PERFORMER "' + performer + '"\n' + 
                     'TITLE "' + title + '"\n' + 
                     'FILE "' + t + '" ' + t.toUpperCase().match(/\w+$/) + '\n' +
                     'REM LENGTH ' + l + '\n\n' +
                     'REM *** inaccurate cuesheet *** generated by tracklist ***\n' + 
                     'REM *** ' + LINK + '***\n\n';
                             
        var regex = xp.replace(/([\.,'"\/#\_()\[\]{}])/g, "\\$1"); 

        for(fld in fields) {
            // choose propper regex pattern for field
            var pattern = "";
            switch(fld) {
                case "TrackNo":
                    pattern = reTrkNo;
                    break;
                case "Title": case "Performer": case "Remark":
                    pattern = reTitle;
                    break;
                case "Duration":
                    pattern = reDurtn;
                    break;
            }
            
            // replace fields with search patterns and save regex reference
            var pos = regex.search(fields[fld]);
            if(pos >= 0) {
                aryFields.push({ fld: fld, pos: pos });                
                regex = regex.replace(fields[fld], pattern);
            }
        }
        
        aryFields.sort(function(a, b) { return (a.pos < b.pos) ? -1 : 1; });
        
        for(i = 0; i < aryFields.length; ++i) {
            objFields[aryFields[i].fld] = "$" + (i + 1);
        }
        
        var data = pl.split("\n");
        var index = 0;
        var interval = parseInt((parseInt(l) * 60 + 
                       parseInt(l.substr(l.search(/[.:]/)+1, l.length))) / data.length);

        for(i in data) {
            new RegExp(regex, "i").exec(data[i]); // i: case insensetive; g: global search;
            
            i = parseInt(i)
            var track = (objFields.TrackNo) ? RegExp[objFields.TrackNo] : i + 1;
            if(track.toString().length<2) track = "0" + track;
            string += '  TRACK ' + track + ' AUDIO\n';

            title = (objFields.Title) ? RegExp[objFields.Title] : "Track " + (i + 1);
            string += '    TITLE "' + title + '"\n';
            
            if(objFields.Performer) {
                string += '    PERFORMER "' + RegExp[objFields.Performer] + '"\n';         
            }  
            
            if(objFields.Remark) {
                string += '    REM "' + RegExp[objFields.Remark] + '"\n';         
            }     
            
            var min = parseInt(index / 60);
            var sec = index % 60;
            if(min.toString().length<2) min = "0" + min;
            if(sec.toString().length<2) sec = "0" + sec;
            
            string += '    INDEX 01 ' + min + ':' + sec + ':00\n';
            
            index += interval;
        }
        
        return string;
    };
});
    
function sampleData() {
    expr.className = "";
    expr.value = "%tracknumber%)%performer% - %title% [%remark%]";
    filename.className = "";
    filename.value = "Rick Tedesco - Cinematics Guest Mix-November 2012.mp3";
    duration.className = "";
    duration.value = "90:05";
    input.className = "";
    input.value = "01)Rick Tedesco - Arcadia (Trukers Sunrise City Remix) [Mistiquemusic]\n\
02)East Cafe - Fayerye (Loquai Breaks Mix) [LuPS Records]\n\
03)Aquareef, Alex Drayling - Thailand (Original Mix) [Arrival]\n\
04)Abstraction Unit - Something About Dreams (Evgeny KoTT Remix) [OLD SQL REC]\n\
05)StudioSnap - Sensitive (Original Mix) [Brain Media Records]\n\
06)Arctic Night, Roger T - Free Space (Digital Department Remix) [Elliptical Sun Recordings]\n\
07)Platinum Monkeys - My Secret (Original Mix) [National Sound Records]\n\
08)Rick Tedesco - Microphased (The Emissary Remix) [Mistiquemusic]\n\
09)Michael Burns - We Will Fade (Abdomen Burst 'Reminiscence' Mix) [Free Download]\n\
10)Abdomen Burst - Sakkura (Dmitry Bessonov Remix) [RUNE]\n\
11)Envio - Time To Say Goodbye (Ozgur Can Remix) [Unknown]\n\
12)Schodt - Cinematico (Original Mix) [Particles]\n\
13)Trukers - Trocotrace(Andrew Philippov Remix) [Mistiquemusic]\n\
14)Digital Department - Request (Esok Remix) [OLD SQL REC]";
    // document.getElementById("cmdStart").click();
}

function addEvent(obj, type, fn, bub)
{
    if(obj.addEventListener) {
        obj.addEventListener(type, fn, bub ? bub : false);
    } else if(obj.attachEvent) {
        // IE spezifisch
        if (type=="DOMContentLoaded") type="load"; // IE unterstützt kein DOMContentLoaded
        obj["e"+type+fn] = fn;
        obj[type+fn] = function() { obj["e"+type+fn]( window.event ); }
        obj.attachEvent( "on"+type, obj[type+fn] );
    }
}

function removeEvent( obj, type, fn )
{
    if (obj.removeEventListener) {
        obj.removeEventListener( type, fn, false );
    } else if (obj.detachEvent) {
        obj.detachEvent( "on"+type, obj[type+fn] );
        obj[type+fn] = null;
        obj["e"+type+fn] = null;
    }
}